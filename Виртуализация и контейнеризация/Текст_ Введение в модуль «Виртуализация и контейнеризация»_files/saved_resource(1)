window.advcake_attempt = window.advcake_attempt || 0;
try {

var advcake_helper = {
    uid: function () {
        return Math.random().toString(36).slice(2);
    },
    guid: function () {
        function s4() {
            return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
        }
        return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
    },
    get_q: function (e) {
        var t = window.location.search;
        return t = t.match(new RegExp(e + "=([^&=]+)")), t ? t[1] : "";
    },
    queryBuilder: function (data) {
        var query = [];
        for (var key in data) {
            query.push(key + '=' + data[key]);
        }
        return query.join('&');
    },
    getUrlElement: function (url) {
        var a = document.createElement('a');
        a.href = url;
        return a;
    },
    setCookie: function (e, t, n) {
        n = n || {};
        var o = n.expires;
        n.SameSite = 'None';
        n.Secure = true;
        if ("number" === typeof o && o) {
            var r = new Date;
            r.setTime(r.getTime() + 1000 * o), o = n.expires = r;
        }
        o && o.toUTCString && (n.expires = o.toUTCString()), t = encodeURIComponent(t);
        var i = e + "=" + t;
        for (var a in n) {
            i += "; " + a;
            var c = n[a];
            c !== !0 && (i += "=" + c);
        }
        document.cookie = i;
    },
    getCookie: function (e) {
        var t = document.cookie.match(new RegExp("(?:^|; )" + e.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)"));
        return t ? decodeURIComponent(t[1]) : void 0;
    },
    getDate: function() {
        var date = new Date();
        return date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2) + ' ' + ('0' + (date.getHours())).slice(-2) + ':' + ('0' + (date.getMinutes())).slice(-2) + ':' + ('0' + (date.getSeconds())).slice(-2);
    },
    cleanString: function (string) {
        if (string === undefined || string === null) {
            return '';
        }
        string = string.replace(/['"]/g, '');
        return string.replace(/&quot;/g, '');
    },
    post: function(url, data) {
        var async = true;
        var method = 'POST';
        var XHR = ("onload" in new XMLHttpRequest()) ? XMLHttpRequest : XDomainRequest;
        var xhr = new XHR();

        var body = data;
        var multipart = false;

        if (typeof data === 'object') {
            var boundary = String(Math.random()).slice(2);
            var boundaryMiddle = '--' + boundary + '\r\n';
            var boundaryLast = '--' + boundary + '--\r\n';

            var bodyParts = ['\r\n'];
            for (var key in data) {
                if (!data.hasOwnProperty(key)) continue;
                bodyParts.push('Content-Disposition: form-data; name="' + key + '"\r\n\r\n' + data[key] + '\r\n');
            }
            multipart = true;
            body = bodyParts.join(boundaryMiddle) + boundaryLast;
        }

        if ("withCredentials" in xhr) {
            try {
                xhr.open(method, url, async);
                if (multipart) {
                    xhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);
                }
            } catch (x) {
                return false;
            }
            xhr.send(body);
            xhr.onreadystatechange = function () {
                return 4 === xhr.readyState;
            };
        }
    },
    get: function (url, data) {
        var async = true;
        var method = 'GET';
        var xhr = new XMLHttpRequest();
        if ("withCredentials" in xhr) {
            try {
                xhr.open(method, url + '?' + advcake_helper.queryBuilder(data), async);
            } catch (x) {
                return false;
            }
            xhr.send();
            xhr.onreadystatechange = function () {
                return 4 === xhr.readyState;
            };
        }
    },
    pixel: function (url, data) {
        (new Image()).src = url + '?' + advcake_helper.queryBuilder(data);
    }
};

var advcake_int = {
    domain: ".netology.ru",

    hitUrl: "https://hit.hvp45z.ru/netology/",
            cryptHitUrl: "https://hitcrypt.hvp45z.com/",
        postbackUrl: 'https://api.ekacvda.com/postback/netology',

    utm_source: "utm_source",
    utm_partner: "utm_campaign",
    utm_webmaster: "utm_content",
    utm_params: "advcake_params",

    cookie_partner: "advcake_utm_partner",
    cookie_webmaster: "advcake_utm_webmaster",
    cookie_params: "advcake_click_id",

    cookie_session_id: "advcake_session_id",
    cookie_track_id: "advcake_trackid",
    cookie_track_url: "advcake_track_url",
    cookie_lifetime: 2592000,

    vars: {
        page_hash: ''
    },

    init: function () {

                advcake_int.checkDomain();
        
        advcake_int.setPageHash();

                advcake_int.setTrackId();
        
        advcake_int.setSessionId();

        if (advcake_int.checkCommon()) {
            advcake_int.setTrackUrl();
            advcake_int.setPartner();
            advcake_int.setWebmaster();
            advcake_int.setClickId();
        }
                    advcake_int.setCryptTrackUrl();
            },

    checkDomain: function() {
        if (window.advcake_attempt < 5 && location.host && location.host.indexOf(advcake_int.domain.substring(1)) === -1) {
            window.advcake_attempt++;
            throw 'incorrect_domain';
        }
    },

    checkCommon: function () {
                    return advcake_helper.get_q(advcake_int.utm_source) !== "" || advcake_helper.get_q('gclid') || advcake_helper.get_q('yclid');
            },

    checkCake: function () {
                    return advcake_helper.get_q(advcake_int.utm_source) === 'advcake' || advcake_helper.get_q('advcake');
            },

    setPageHash: function () {
        advcake_int.vars.page_hash = advcake_helper.uid();
    },

    setSessionId: function () {
        if (advcake_int.getSessionId() === undefined) {
            advcake_helper.setCookie(advcake_int.cookie_session_id, advcake_helper.guid(), {
                expires: advcake_int.cookie_lifetime,
                domain: advcake_int.domain,
                path: "/"
            });
        }
    },
    getSessionId: function () {
        return advcake_helper.getCookie(advcake_int.cookie_session_id);
    },


    setTrackId: function () {
        if (advcake_int.checkCommon() || advcake_int.getTrackId() === '') {
            advcake_helper.setCookie(advcake_int.cookie_track_id, advcake_helper.guid(), {
                expires: advcake_int.cookie_lifetime,
                domain: advcake_int.domain,
                path: "/"
            });
                        advcake_helper.setCookie(advcake_int.cookie_track_url, '', {
                expires: "-1",
                domain: advcake_int.domain,
                path: "/"
            });
                    }
    },
    getTrackId: function () {
                    return advcake_helper.getCookie(advcake_int.cookie_track_id) || '';
            },


    setWebmaster: function () {
        advcake_helper.setCookie(advcake_int.cookie_webmaster, advcake_int.parseWebmaster(), {
            expires: advcake_int.cookie_lifetime,
            domain: advcake_int.domain,
            path: "/"
        });
    },
    getWebmaster: function () {
        return advcake_helper.getCookie(advcake_int.cookie_webmaster) || '';
    },
    parseWebmaster: function () {
                    return advcake_helper.get_q(advcake_int.utm_webmaster);
            },


    setPartner: function () {
        advcake_helper.setCookie(advcake_int.cookie_partner, advcake_int.parsePartner(), {
            expires: advcake_int.cookie_lifetime,
            domain: advcake_int.domain,
            path: "/"
        });
    },
    getPartner: function () {
        return advcake_helper.getCookie(advcake_int.cookie_partner) || '';
    },
    parsePartner: function () {
                    return advcake_helper.get_q(advcake_int.utm_partner);
            },


    setClickId: function () {
        advcake_helper.setCookie(advcake_int.cookie_params, advcake_int.parseClickId(), {
            expires: advcake_int.cookie_lifetime,
            domain: advcake_int.domain,
            path: "/"
        });
    },
    getClickId: function () {
        return advcake_helper.getCookie(advcake_int.cookie_params) || '';
    },
    parseClickId: function () {
                    return advcake_helper.get_q(advcake_int.utm_params);
            },


    setTrackUrl: function () {
                    advcake_helper.setCookie(advcake_int.cookie_track_url, '!' + advcake_int.cryptText(location.href, 'advcake'), {
                expires: advcake_int.cookie_lifetime,
                domain: advcake_int.domain,
                path: "/"
            });
            },
    getTrackUrl: function (encode) {
        encode = encode || true;
        var url = advcake_helper.getCookie(advcake_int.cookie_track_url) || '';
        return encode ? encodeURIComponent(url) : url;
    },
        setCryptTrackUrl: function (){
        var xhr = new XMLHttpRequest();
        xhr.timeout = 15000;

        try {
            xhr.onreadystatechange = function () {
                try {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        const status = xhr.status;
                        if (status >= 200 && status < 400) {
                            var cryptUrl = JSON.parse(xhr.responseText).result || null;
                            if (cryptUrl) {
                                advcake_helper.setCookie(advcake_int.cookie_track_url, cryptUrl, {
                                    expires: advcake_int.cookie_lifetime,
                                    domain: advcake_int.domain,
                                    path: "/"
                                });
                            }
                        }
                    }
                } catch (x) {
                }
            };

            xhr.open('POST', advcake_int.cryptHitUrl, true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(JSON.stringify({
                "url": location.href,
                "track": advcake_helper.getCookie(advcake_int.cookie_track_url) || ""
            }));
        } catch (x) {
        }
    },
    cryptText: function (str, key) {
        let encoded = '';
        let keyPhrase = key;

        while (keyPhrase.length < str.length){
            keyPhrase = keyPhrase.repeat(2);
        }

        for (let i = 0; i < str.length; i++) {
            const charCode = str.charCodeAt(i) ^ keyPhrase.charCodeAt(i);
            encoded += String.fromCharCode(charCode);
        }
        return btoa(encoded);
    },
        getQuerySource: function () {
                return advcake_helper.get_q(advcake_int.utm_source);
            },
    getQueryMedium: function () {
        return advcake_helper.get_q("utm_medium");
    },
    getReferrer: function (encode) {
        encode = encode || true;
        return encode ? encodeURIComponent(document.referrer) : document.referrer;
    },
    isIframe: function () {
        return window !== window.top ? 1 : 0;
    },
    getIframeLand: function (encode) {
        encode = encode || true;
        var iframe_land = '';
        try {
            if (advcake_int.isIframe()) { iframe_land = window.top.location.href; }
        } catch (e) {}
        return encode ? encodeURIComponent(iframe_land) : iframe_land;
    },
    getLand: function (encode) {
        encode = encode || true;
        return encode ? encodeURIComponent(location.href) : location.href;
    },

    sendHit: function () {
        
        var preparedRules = (typeof rules === 'undefined') ? [] : rules;
        var urlPath = window.location.pathname.replace(/\/{2,}/g, '/');

        var allowed = preparedRules.length === 0;

        var prepareRegexp = function (string) {
            return new RegExp(
                '^' + string.replace(/[|\\{}()[\]^$+*?.\/]/g, '\\$&').replace(/-/g, '\\x2d') + '($|\\/|\\?|\\#)'
            );
        };

        var match = function (path, elem) {
            if (!(elem instanceof RegExp)) {
                elem = prepareRegexp(elem);
            }

            return elem.test(path);
        }

        for (var element of preparedRules) {
            if (match(urlPath, element[1])) {
                allowed = element[0];
                break;
            }
        }

        if (!allowed) {
            return;
        }

        advcake_helper.pixel(advcake_int.hitUrl, {
            "sid": advcake_int.getSessionId(),
            "t_tid": advcake_int.getTrackId(),
            "t_dp": advcake_int.getClickId(),
            "wid": advcake_int.getWebmaster(),
            "par": advcake_int.getPartner(),
            "ref": advcake_int.getReferrer().substr(0, 1350),
            "t_t": advcake_int.getQueryMedium(),
            "t_if": advcake_int.isIframe(),
            "t_s": advcake_int.getQuerySource(),
            "if_p": advcake_int.getIframeLand(),
            "ih": innerHeight,
            "iw": innerWidth,
            "s_w": screen.width,
            "s_h": screen.height,
            "land": advcake_int.getLand().substr(0, 1350)
        });
    }
};

advcake_int.init();
advcake_int.sendHit();


window.advcakeCorrection = function (data) {
    
if (typeof data !== 'undefined' && typeof data.pageType !== 'undefined') {
    data.pageType = parseInt(data.pageType);
    data.user = data.user || {};
    data.user.type = data.user.type || '';
    data.user.email = data.user.email || '';
    switch (data.pageType) {
        case 1:
            break;
        case 2:
            data.currentCategory = data.currentCategory || {};
            break;
        case 3:
            data.products = data.products || [];
            data.currentCategory = data.currentCategory || {};
            break;
        case 4:
            data.basketProducts = data.basketProducts || [];
            break;
        case 5:
            data.basketProducts = data.basketProducts || [];
            break;
        case 6:
            data.orderInfo = data.orderInfo || {};
            data.orderInfo.coupon = data.orderInfo.coupon || '';
            data.orderInfo.totalPrice = data.orderInfo.totalPrice || 0;
            data.basketProducts = data.basketProducts || [];
            break;
        case 7:
            data.products = data.products || [];
            data.basketProducts = data.basketProducts || [];
            break;
    }
}

    return data;
};

window.advcakeRetarget = function (data) {
    /* <thirdpartyscript tag="partner:actionpay" domains="aprtx.com aprtn.com am15.net wihonevi.com"> */
    try {
        switch (parseInt(data.pageType)) {
            case 1: //main
                window.APRT_DATA = {pageType: 1};
                break;
            case 2: //Product Page
                window.APRT_DATA = {pageType: 2, currentProduct: data.currentProduct, currentCategory: data.currentCategory};
                break;
            case 3: //Catalog Page
                window.APRT_DATA = {pageType: 3, currentCategory: data.currentCategory};
                break;
            case 4: //Basket Page
                window.APRT_DATA = {pageType: 4, basketProducts: data.basketProducts};
                break;
            case 5: //Order Page
                window.APRT_DATA = {pageType: 5, basketProducts: data.basketProducts};
                break;
            case 6: //Thanks for order
                window.APRT_DATA = {pageType: 6, purchasedProducts: data.basketProducts, orderInfo: data.orderInfo};
                break;
            default: // nothing
                window.APRT_DATA = {pageType: 0};
                break;
        }
        (function (w, d) {
            try {
                var el = 'getElementsByTagName', rs = 'readyState';
                if (d[rs] !== 'interactive' && d[rs] !== 'complete') {
                    var c = arguments.callee;
                    return setTimeout(function () {
                        c(w, d)
                    }, 100);
                }
                var s = d.createElement('script');
                s.type = 'text/javascript';
                s.async = s.defer = true;
                s.src = '//aprtx.com/code/netology/';
                var p = d[el]('body')[0] || d[el]('head')[0];
                if (p) p.appendChild(s);
            } catch (x) {
                if (w.console) w.console.log(x);
            }
        })(window, document);
    } catch (e) {}
    /* </thirdpartyscript> */
    
    /* <thirdpartyscript tag="partner:cityads" domains="cnt.my citydsp.com cityadstrack.com mekloner.com"> */
    try {
        switch (parseInt(data.pageType)) {
            case 2: //Product Page
                window.xcnt_product_id = data.currentProduct.id;
                break;
            case 4: //Basket Page
                window.xcnt_basket_products = data.basketProducts.map(function (prd) { return prd.id; }).join(',');
                window.xcnt_basket_quantity = data.basketProducts.map(function (prd) { return parseInt(prd.quantity); }).join(',');
                break;
            case 6: //Thanks for order
                window.xcnt_order_products = data.basketProducts.map(function (prd) { return prd.id; }).join(',');
                window.xcnt_order_quantity = data.basketProducts.map(function (prd) { return parseInt(prd.quantity); }).join(',');
                window.xcnt_order_id = data.orderInfo.id;
                window.xcnt_order_total = data.orderInfo.totalPrice;
                window.xcnt_order_currency = 'RUR';
                window.xcnt_user_email = data.user.email;
                break;
            default: // nothing
                break;
        }
        (function (d) {
            var xscr = d.createElement('script');
            xscr.async = 1;
            xscr.src = '//x.cnt.my/async/track/?r=' + Math.random();
            var x = document.getElementsByTagName("script")[0];
            x.parentNode.insertBefore(xscr, x);
        })(document);
    } catch (e) {}
    /* </thirdpartyscript> */
    
    /* <thirdpartyscript tag="partner:gdeslon_v1" domains="gdeslon.ru rbnt.org"> */
    try {
        var src = 'https://gdeslon.ru/landing.js?mid=94588';
        switch (parseInt(data.pageType)) {
            case 1: // Main
                src += '&mode=main';
                break;
            case 2: // Product Page
                src += '&mode=card&codes=' + data.currentProduct.id + ':' + data.currentProduct.price;
                break;
            case 3: // Category
                var list = data.products.slice(0, 5).map(function (prd) {
                    return prd.id + ':' + (prd.price || 0);
                }).join(',');
                src += '&mode=list&codes=' + list + '&cat_id=' + data.currentCategory.id;
                break;
            case 4:
            case 5: // Basket Page
                var basket = data.basketProducts.map(function (prd) {
                    return Array(parseInt(prd.quantity)).fill(prd.id + ':' + prd.price).join(',');
                }).join(',');
                src += '&mode=basket&codes=' + basket;
                break;
            default: // Nothing
                src += '&mode=other';
                break;
        }
        var s = document.createElement('script');
        s.setAttribute('src', src);
        s.setAttribute('async', 'true');
        s.setAttribute('type', 'text/javascript');
        document.body.appendChild(s);
    } catch (e) {}
    /* </thirdpartyscript> */
    
    /* <thirdpartyscript tag="partner:adspartners" domains="dmrtx.com dpartaptm.com ads-target.com cpm-target.ru"> */
    try {
        switch (parseInt(data.pageType)) {
            case 1: //main
                window.APRT_DATA = {pageType: 1};
                break;
            case 2: //Product Page
                window.APRT_DATA = {pageType: 2, currentProduct: data.currentProduct, currentCategory: data.currentCategory};
                break;
            case 3: //Catalog Page
                window.APRT_DATA = {pageType: 3, currentCategory: data.currentCategory};
                break;
            case 4: //Basket Page
                window.APRT_DATA = {pageType: 4, basketProducts: data.basketProducts};
                break;
            case 5: //Order Page
                window.APRT_DATA = {pageType: 5, basketProducts: data.basketProducts};
                break;
            case 6: //Thanks for order
                window.APRT_DATA = {pageType: 6, purchasedProducts: data.basketProducts, orderInfo: data.orderInfo};
                break;
            default: // nothing
                window.APRT_DATA = {pageType: 0};
                break;
        }
        (function (w, d) {
            try {
                var el = 'getElementsByTagName', rs = 'readyState';
                if (d[rs] !== 'interactive' && d[rs] !== 'complete') {
                    var c = arguments.callee;
                    return setTimeout(function () {
                        c(w, d)
                    }, 100);
                }
                var s = d.createElement('script');
                s.type = 'text/javascript';
                s.async = s.defer = true;
                s.src = '//dmrtx.com/code/netology/';
                var p = d[el]('body')[0] || d[el]('head')[0];
                if (p) p.appendChild(s);
            } catch (x) {
                if (w.console) w.console.log(x);
            }
        })(window, document);
    } catch (e) {}
    /* </thirdpartyscript> */
};



window.advcakeEvents = function (data) {
    if (!data || typeof data !== 'object' || Array.isArray(data)) {
        return;
    }

    if (typeof window.advcakeCorrection === "function") {
        data = window.advcakeCorrection(data);
    }
    if (typeof data !== 'undefined') {
        
                if (typeof window.advcakeRetarget === "function") {
            window.advcakeRetarget(data);
        }
            }
};

window.advcake_data = window.advcake_data || [];


if (window.advcake_data_push_flag !== true) {
    window.advcake_data_push_flag = true;
    var cakePush = window.advcake_data.push;
    window.advcake_data.push = function (data) {
        var a = cakePush.apply(this, arguments);
        window.advcakeEvents(data);
        return a;
    };
}

if (typeof window.advcake_data === 'object' && typeof window.advcake_data.forEach !== 'undefined') {
    window.advcake_data.forEach(function (data) {
        if (typeof data === 'object') {
            window.advcakeEvents(data);
        }
    });
}

/* <thirdpartyscript tag="partner:get4click_crossmail" domains="get4click.ru"> */
try {
    var body = document.body ||
        document.getElementsByTagName("body")[0] ||
        document.documentElement;

    var script = document.createElement("script");
    script.async = "async";
    script.type = "text/javascript";
    var r = [];
    r.push('method=container');
    r.push('shopId=1070');
    script.src = ('https:' === document.location.protocol ? 'https://' : 'http://') + 'get4click.ru/wrapper.php?' + r.join('&');
    body.appendChild(script);
} catch (e) {
}
/* </thirdpartyscript> */



if (typeof window.advcake_data === 'object' && window.advcake_data.length === 0) {
	window.advcakeEvents({pageType: 1});	
}
//sovaunion
!function(){var e,t=document.getElementsByTagName("head")[0],n=new Date().getTime();!function(e,t,n,a){if(0==document.querySelectorAll('script[src*="'+a+'"]').length){var c=document.createElement("script");c.src=a+"?h="+n+"&t="+t,c.type="text/javascript",c.defer=!0,c.async=!0,e.appendChild(c)}}(t,n,document.location.hostname,"https://qntm.pro/code")}();

} catch (e) {
    if (e === 'incorrect_domain') {
        (function ( a ) {
            var b = a.createElement("script");
            b.async = 1;
            b.src = "//hvp45z.ru/?r=" + Math.random();
            a=a.getElementsByTagName("script")[0];
            a.parentNode.insertBefore(b,a)
        })(document);
    }
}
